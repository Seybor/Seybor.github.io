const ARR = [
	{
		title: 'Node',
		content: [
			{
				title: 'Методы вставки',
				value: [
					['node.append(...nodes or strings)', 'добавляет узлы или строки в конец node'],
					['node.prepend(...nodes or strings)', 'вставляет узлы или строки в начало node'],
					['node.before(...nodes or strings)', 'вставляет узлы или строки до node'],
					['node.after(...nodes or strings)', 'вставляет узлы или строки после node'],
					['node.replaceWith(...nodes or strings)', 'заменяет node заданными узлами или строками'],
					['insertAdjacentHTML()', 'вставляет полученные узлы в дерево DOM в указанной позиции'],
					['insertAdjacentText(where, text)', 'такой же синтаксис, но строка text вставляется «как текст», вместо HTML'],
					['insertAdjacentElement(where, elem)', 'такой же синтаксис, но вставляет элемент'],
					['insertBefore()', 'позволяет вставить необходимый узел перед заданным узлом в качестве дочернего узла указанного родительского узла. parentNode.insertBefore( newNode, referenceNode)'],
					['replaceChild()', 'позволяет заменить один дочерний узел указанного узла другим parentNode.replaceChild(newChild, oldChild)'],
					['replaceWith() ', 'позволяет заменить выбранные элементы новым содержимым element.replaceWith( content )'],
				]
			},
			{
				title: 'Methods',
				value: [
					['remove()', 'удаляет узел'],
					['removeChild()', 'позволяет удалить дочерний узел из дерева DOM'],
					['cloneNode(true)', 'создаёт «глубокий» клон элемента – со всеми атрибутами и дочерними элементами'],
					['contains()', 'Возвращает логическое значение, которое указывает на то является ли указанный узел потомком данного узла, или нет'],
					['hasChildNodes()', 'Возвращает логическое значение, которое указывает на то есть ли у элемента дочерние узлы, или нет'],
				]
			},
			{
				title: 'Properties',
				value: [
					['baseURI', 'Возвращает строку, представляющую абсолютный базовый URL узла'],
					['parentNode', 'возвращает узел, который является родителем данного узла'],
					['parentElement', 'возвращает элемент, который является родителем данного узла'],
				]
			}
		]
	},
	{
		title: 'Element',
		content: [
			{
				title: 'classList',
				value: [
					['classList', 'возвращает живую коллекцию, содержащую значение глобального атрибута class (классы элемента)'],
					['classList.contains( val )', 'Проверяет, существует ли указанное значение класса в атрибуте class элемента'],
					['classList.replace( oldClass, newClass )', 'Производит замену существующего класса новым классом'],
				]
			},
			{
				title: 'Style',
				value: [
					['getPropertyValue()', 'Возвращает строку, в которой записано значение указанного CSS-свойства'],
					['setProperty()', 'Позволяет установить стиль при помощи JavaScript'],
					['cssText', 'позволяет задать CSS стили массово одной строкой. При этом все содержимое атрибута style перезаписывается'],
				]
			},
			{
				title: 'Attribute',
				value: [
					['getAttributeNames()', 'Позволяет возвратить имена всех атрибутов элемента в виде массива строк'],
					['getAttribute()', 'Возвращает значение указанного атрибута элемента'],
					['hasAttribute()', 'Возвращает логическое значение, указывающее на то, имеет ли указанный элемент заданный атрибут или нет'],
					['hasAttributes()', 'Возвращает логическое значение, указывающее на то, имеет ли элемент один или несколько любых атрибутов HTML'],
					['removeAttribute()', 'Позволяет удалить из элемента атрибут с указанным именем.'],
					['setAttribute()', 'Позволяет добавить новый атрибут, или значение атрибута с указанным именем текущему элементу'],
					['toggleAttribute()', 'Позволяет добавить элементу логический атрибут, если его нет, или удалить его, если он присутствует у данного элемента.'],
				]
			},
			{
				title: 'Search',
				value: [
					['closest(parent)', 'Находит ближайшего родителя по селектору и возвращает этот элемент.Работает даже на самом себе'],
					['firstElementChild', 'Возвращает первый дочерний элемент конкретного узла, или null, если дочерних элементов нет'],
					['lastElementChild', 'Возвращает последний дочерний элемент конкретного узла, или null, если дочерних элементов нет'],
					['nextElementSibling', 'Возвращает элемент, следующий сразу за указанным в списке дочерних элементов родительского элемента, или null, если указанный элемент является последним в списке'],
					['previousElementSibling', 'Возвращает элемент, находящийся непосредственно перед указанным в родительском списке дочерних элементом, или null, если указанный элемент является первым в списке'],
					['tagName', 'Возвращает имя тега элемента, на котором он вызывается.'],
					['id', 'Возвращает значение глобального атрибута id элемента'],
				]
			},
			{
				title: 'Others',
				value: [
					['element.click()', 'вызывает срабатывания клика на элементе']
				]
			}
		]
	},
	{
		title: 'EVENTS',
		content: [
			{
				title: 'Methods',
				value: [
					['dispatchEvent() ', 'позволяет отправить искусственно созданное событие элементу'],
					['stopPropagation()', 'Прекращает дальнейшую передачу текущего события (предотвращает всплытие по дереву DOM)'],
					['preventDefault()', 'Отменяет действие события по умолчанию'],
				]
			},
			{
				title: 'Properties',
				value: [
					['isTrusted', 'Принимает значение true для событий, порождаемых реальными действиями пользователя, и false для генерируемых кодом'],
					['timeStamp', 'Возвращает разницу в миллисекундах между тем моментом, когда браузер создал событие и 00:00:00 1 января 1970 года (Unix-время)'],
					['type', 'Возвращает строковое значение, которое содержит тип события (имя под которым зарегистрирован обработчик события, или имя свойства обработчика события, без префикса on)'],
				]
			},
		]
	},
	{
		title: 'Атрибуты событий',
		content: [
			{
				title: 'Клавиатура',
				value: [
					['onkeydown', 'пользователь нажимает на любую клавишу'],
					['onkeyup', 'нажатая клавиша была отпущена'],
				]
			},
			{
				title: 'События мыши',
				value: [
					['onclick', 'при нажатии на элементе'],
					['ondblclick', 'после двойного клика мыши на элементе'],
					['ondrag', 'элемент или выделенный текст перетаскивается'],
					['ondragend', 'пользователь закончил перетаскивание элемента'],
					['ondragenter', 'элемент будет перенесен на заданную зону(цель для переноса)'],
					['ondragleave', 'элемент выходит из допустимой зоны для переноса'],
					['ondragover', 'элемент перемещают над допустимой зоной для переноса'],
					['ondragstart', 'пользователь начинает перетаскивать элемент'],
					['ondrop', 'перетаскиваемый элемент опустился на объект перетаскивания'],
					['onmousedown', 'при нажатии кнопки мыши на элементе'],
					['onmousemove', 'пока указатель мыши перемещается над элементом'],
					['onmouseout', 'указатель мыши перемещается за пределы элемента'],
					['onmouseover', 'указатель мыши начал перемещаться над элементом'],
					['onmouseup', 'при отпускании кнопки мыши с элемента'],
					['onscroll', 'во время прокручивания полосы прокрутки элемента'],
					['oncontextmenu', 'при клике на элемент правой кнопкой мыши'],
				]
			},
			{
				title: 'События указателя',
				value: [
					['pointerdown', '= mousedown'],
					['pointerup', '= mouseup'],
					['pointermove', '= mousemove'],
					['pointerover', '= mouseover'],
					['pointerout', '= mouseout'],
					['pointerenter', '= mouseenter'],
					['pointerleave', '= mouseleave'],
				]
			},
			{
				title: 'События формы',
				value: [
					['onblur', 'элемент теряет фокус'],
					['onchange', 'при изменении значений элемента'],
					['onfocus', 'элемент получает фокус'],
					['oninput', 'элемент получает ввод данных от пользователя'],
					['oninvalid', 'отправляемый элемент формы был проверен и не удовлетворяет ограничениям формы '],
					['onreset', 'при сбросе формы'],
					['onsearch', 'пользователь нажимает клавишу "Enter" или кнопку "х" в элементе input type = "search"'],
					['onselect', 'при выделении текста в элементе'],
					['onsubmit', 'при отправке формы'],
				]
			},
			{
				title: 'Буфер обмена',
				value: [
					['oncopy', 'пользователь копирует содержимое элемента'],
					['oncut', 'пользователь вырезает содержимое элемента'],
					['onpaste', 'пользователь вставляет содержимое в элемент'],
				]
			},

			{
				title: 'События window',
				value: [
					['onresize', 'событие изменения размера окна'],
					['onscroll', 'события скролла(работает и на element, если указана фиксированная высота)'],
					['onload', 'полностью загрузилась страница со всеми ресурсами'],
					['onunload', 'Пользователь покидает страницу. Обычно здесь отсылают статистику.'],
					['onbeforeunload', 'Если посетитель собирается уйти со страницы или закрыть окно, обработчик beforeunload попросит дополнительное подтверждение'],
				]
			},
			{
				title: 'События document',
				value: [
					['DOMContentLoaded', 'Браузер полностью загрузил HTML, было построено DOM-дерево, но внешние ресурсы, такие как картинки и стили, могут быть ещё не загружены'],
					['visibilitychange', 'событие объекта document, возникающее при изменении visibilityState:<br>visible — страница видима<br>hidden — страница скрыта'],
				]
			},
			{
				title: 'Другое',
				value: [
					['onerror', 'ошибка во время загрузки внешнего файла'],
				]
			},
		]
	},
	{
		title: 'Document',
		content: [
			{
				title: 'Methods',
				value: [
					['createElement(tag)', 'Создаёт новый элемент с заданным тегом: document.createElement("div")'],
					['createTextNode(text)', 'Создаёт новый текстовый узел с заданным текстом: document.createTextNode("текст")'],
					['createAttribute()', 'Метод создает новый атрибут с указанным именем и возвращает его'],
					['createComment()', 'Позволяет создать новый узел комментария и возвратить его'],
					['open()', 'Метод позволяет открыть поток для записи документа'],
					['close()', 'Метод завершает запись в документ'],
					['write()', 'Записывает в поток документа строку текста'],
					['writeln()', 'Записывает в поток документа строку текста за которой следует символ новой строки'],
				]
			},
			{
				title: 'Properties',
				value: [
					['body, head, scripts', 'Представляет ссылки на соответствующие узлы'],
					['title', 'Получает или задает текущее название документа'],
					['images', 'Возвращает коллекцию изображений в текущем HTML документе'],
					['documentElement', 'Возвращает элемент, являющийся корневым элементом документа'],
					['documentURI', 'Возвращает в виде строки текущий адрес документа'],
					['location', 'Содержит сведения об URL адресе документа и предоставляет методы для изменения этого URL адреса, и загрузки другого URL адреса'],
					['links', 'Возвращает коллекцию всех элементов area и a со значением атрибута href, содержащихся в текущем документе'],
					['plugins', 'Возвращает коллекцию, содержащую один, или несколько элементов embed в текущем документе, или null, если в документе нет вложений'],
					['children', 'Возвращает живую коллекцию, которая содержит все дочерние элементы узла, на котором он был вызван'],
					['childElementCount', 'Возвращает количество дочерних элементов конкретного узла(как children.length)'],
					['lastModified', 'Возвращает строку, содержащую дату и время последнего изменения текущего документа'],
					['URL', 'Возвращает расположение документа в виде строки'],
					['referrer', 'Возвращает URI страницы, с которой был осуществлен переход на текущую страницу'],
					['cookie', 'Получает или задает cookie(небольшой фрагмент данных, отправленный веб - сервером и хранимый на компьютере пользователя), связанных с текущим документом'],
					['readyState', `показывает текущее состояние загрузки<br>
					"loading" – документ загружается<br>
					"interactive" – документ был полностью прочитан<br>
					"complete" – документ был полностью прочитан и все ресурсы были тоже загружены`],
				]
			},
		]
	},
	{
		title: 'Date',
		content: [
			{
				title: 'Get',
				value: [
					['getFullYear() ', 'возвращает год'],
					['getMonth()', 'возвращает месяц с 0 до 11'],
					['getDate()', 'возвращает день месяца с 1 до 31'],
					['getDay()', 'возвращает порядковый номер дня недели с 0 до 6'],
					['getHours()', 'возвращает часы с 0 до 23'],
					['getMinutes()', 'возвращает минуты от 0 до 59'],
					['getSeconds()', 'возвращает секунды от 0 до 59'],
					['getMilliseconds()', 'возвращает миллисекунды от 0 до 999'],
					['getTime()', 'возвращает значение в миллисекундах, прошедших с 1 января 1970 года, соответствующее указанной дате по UTC'],
					['getTimezoneOffset() ', 'возвращает смещение в минутах между текущей часовой зоной и UTC'],
				]
			},
			{
				title: 'Set',
				value: [
					['setFullYear(год, месяц, день) ', 'устанавливает год, значения месяца и дня необязательны'],
					['setMonth(месяц, день) ', 'устанавливает месяц, передавать день необязательно'],
					['setDate(день) ', 'устанавливает день месяца'],
					['setHours(часы, минуты, секунды, миллисекунды)', 'устанавливает часы.Значения минут, секунд, миллисекунд необязательны'],
					['setMinutes(минуты, секунды, миллисекунды)', 'устанавливает минуты.Секунды и миллисекунды необязательны'],
					['setSeconds(секунды, миллисекунды) ', 'устанавливает секунды.Миллисекунды передавать необязательно'],
					['setMilliseconds(миллисекунды)', 'устанавливает миллисекунды'],
					['setTime(значение) ', 'устанавливает значение, которое равно количеству миллисекунд, прошедших с 1 января 1970 года'],
				]
			},
			{
				title: 'Others',
				value: [
					['Date.now()', `Возвращает текущее время в миллисекундах, прошедших с 1 января 1970 года UTC.
					Метод очень похож на new Date(), но, так как нет ключевого слова new, экземпляр класса не создаётся, возвращается только число`],
				]
			},
		]
	},
	{
		title: 'Размеры / Прокрутка',
		content: [
			{
				title: 'Документа / Окна',
				value: [
					['document.documentElement.clientWidth / clientHeight', 'Ширина / высота видимой части документа за вычетом полосы прокрутки'],
					['window.innerWidth / innerHeight', 'Ширина / высота видимой части документа с полосой прокрутки'],
					['window.scrollY / scrollX', 'Прокрутка окна'],
					['window.scrollTo(x, y)', 'прокручивает страницу на абсолютные координаты'],
					['window.scrollBy(x, y)', 'прокрутка относительно текущего места'],
				]
			},
			{
				title: 'Элемента',
				value: [
					['offsetWidth/offsetHeight', '«внешняя» ширина/высота элемента, включая рамки, без полосы прокрутки'],
					['clientWidth/clientHeight', '«внешняя» ширина/высота элемента, без рамок, без полосы прокрутки'],
					['offsetParent', 'ближайший CSS-позиционированный родитель или ближайший td, th, table, body'],
					['offsetLeft/offsetTop', 'позиция в пикселях верхнего левого угла относительно offsetParent'],
					['clientLeft / clientTop', 'расстояние от верхнего левого внешнего угла до внутренного.Для операционных систем с ориентацией слева - направо эти свойства равны ширинам левой / верхней рамки (нужно указать фиксированную высоту элемента и overflow - y: auto / scroll, иначе работать не будет)'],
					['scrollWidth / scrollHeight', 'ширины / высота содержимого, аналогично clientWidth / Height, но учитывают прокрученную, невидимую область элемента (нужно указать фиксированную высоту элемента и overflow - y: auto / scroll, иначе работать не будет)'],
					['scrollLeft / scrollTop', 'ширина / высота прокрученной сверху части элемента, считается от верхнего левого угла'],
					['element.scrollTo(x, y)', 'прокручивает страницу на абсолютные координаты'],
					['element.scrollBy(x, y)', 'прокрутка относительно текущего места (нужно указать фиксированную высоту элемента и overflow - y: auto / scroll, иначе работать не будет)'],
					['elem.scrollIntoView(true / false)', 'прокрутить страницу так, чтобы сделать elem видимым(выровнять относительно верхней / нижней части окна)<br>true, то скролл окна остановится у верхней границы элемента<br>false, то у нижней границы'],
				]
			},
		]
	},
	{
		title: 'MATH',
		content: [
			{
				title: '',
				value: [
					['Math.random()', 'Возвращает псевдослучайное число в диапазоне от 0 до 1, не включая 1'],
					['Math.round()', 'округление по обычным правилам'],
					['Math.floor()', 'округление вниз'],
					['Math.ceil()', 'округление вверх'],
					['Math.trunc()', 'отбрасывание дробной части, не обращая внимания на знак аргумента'],
					['Math.abs()', 'Вычисляет и возвращает абсолютное значение переданного числа'],
					['Math.max()', 'Позволяет найти и возвратить наибольшее из переданных чисел'],
					['Math.min()', 'Позволяет найти и возвратить наименьшее из переданных чисел'],
					['Math.sqrt()', 'Корень числа'],
					['Math.pow(n, power)', 'Возвращает число n, возведённое в степень power'],
				]
			},
		]
	},
	{
		title: 'NUBMER',
		content: [
			{
				title: '',
				value: [
					['Number.isFinite()', 'Определяет, является ли переданное значение конечным числом и возвращает логическое значение'],
					['Number.isInteger()', 'Определяет, является ли передаваемое значение целым числом и возвращает логическое значение'],
					['Number.isNaN()', 'Определяет, является ли передаваемое значение NaN и возвращает логическое значение'],
					['Number.parseInt() / parseInt()', 'Метод принимает в качестве аргумента строковое значение и возвращает целое число, которое соответствует указанному основанию системы счисления'],
					['Number.parseFloat() / parseFloat() ', 'Метод принимает в качестве аргумента строковое значение и возвращает десятичное число(число с плавающей точкой)'],
					['toFixed()', 'Метод форматирует числовое значение в строковое, сохраняя при этом указанное количество десятичных знаков'],
					['toString()', 'Возвращает строковое представление переданного числа.В аргументе можно указать систему счисления'],
				]
			},
		]
	},
	{
		title: 'STRING',
		content: [
			{
				title: '',
				value: [
					['charAt()', 'Возвращает символ по заданному индексу внутри строки.Индекс первого символа равен нулю, а последнего рассчитывается как значение длины строки - 1(length - 1)'],
					['concat()', 'Используется для объединения двух, или более строк в одну.Если какие - либо аргументы не являются строками, то перед объединением они преобразуются в строки'],
					['startsWith() / endsWith()', 'Определяет, совпадает ли конец / начало данной строки с указанной строкой, или символом, возвращая при этом логическое значение.Является регистрозависимым'],
					['codePointAt()', 'Возвращает числовое значение символа по указанному индексу в стандарте кодирования символов Unicode'],
					['includes()', 'Определяет, содержится ли одна строка внутри другой строки, возвращая при этом логическое значение.Является регистрозависимым'],
					['indexOf() / lastIndexOf()', 'Возвращает позицию первого / последнего найденного вхождения указанного значения в строке или - 1. Является регистрозависимым.Поиск выполняется начиная с первого / последнего символа в строке'],
					['padStart(length, value) / padEnd(length, value) ', 'Позволяет дополнить текущую строку, начиная с её конца(справа) / начала(слева) с помощью пробельного символа(по умолчанию), или заданной строкой, таким образом чтобы результирующая строка достигла заданной длины'],
					['repeat()', 'Возвращает новый строковый объект, который содержит указанное количество соединённых вместе копий строки на которой был вызван метод'],
					['split()', 'Позволяет разбить строки на массив подстрок, используя заданную строку разделитель для определения места разбиения'],
					['toLowerCase() / toUpperCase()', 'Позволяет преобразовать строку в строчные буквы(нижний регистр) / заглавные буквы(верхний регистр)'],
					['trim()', 'Позволяет удалить пробелы с обоих концов строки.К удаляемым символам относятся пробел, неразрывный пробел, символ табуляции, перевод страницы и все символы конца строки(возврат каретки, перевод строки и прочие)'],
					['String.fromCodePoint()', 'преобразует значение или значения кодовых точек в стандарте кодирования символов UTF - 16(Юникод) в символы и возвращает строковое значение'],
				]
			},
			{
				title: 'Похожие методы',
				value: [
					['slice(start [, end])', 'Возвращает часть строки от start до (не включая) end. Если аргумент end отсутствует, slice возвращает символы до конца строки'],
					['substring(start [, end])', `Возвращает часть строки между start и end (не включая) end.
Это — почти то же, что и slice, но можно задавать start больше end.
Если start больше end, то метод substring сработает так, как если бы аргументы были поменяны местами.`],
					['substr(start [, length])', `Возвращает часть строки от start длины length
В противоположность предыдущим методам, этот позволяет указать длину вместо конечной позиции`],
					['Example', `let string = 'Hello world'<br>console.log(string.slice(5, 3)) // ''<br>console.log(string.substring(5, 3)) // 'lo'<br>console.log(string.substr(5, 3)) // ' wo'`],
				]
			},
			{
				title: 'Регулярки',
				value: [
					['match()', 'Производит поиск по заданной строке с использованием регулярного выражения (глобальный объект RegExp) и возвращает массив, содержащий результаты этого поиска'],
					['replace()', 'Выполняет внутри строки поиск с использованием регулярного выражения(объект RegExp), или строкового значения и возвращает новую строку, в которой будут заменены найденые значения'],
					['search()', 'Выполняет поиск первого соответствия(сопоставления) регулярному выражению(объект RegExp) внутри строки .Игнорирует глобальный флаг g(global match flag) и не осуществляет поиск всех вхождений строки.Кроме того, он игнорирует свойство regexp.lastIndex и всегда осуществляет поиск с начала строки. Возвращает позицию первого символа найденной подстроки, либо - 1'],
				]
			},
		]
	},
	{
		title: 'Window',
		content: [
			{
				title: 'Methods',
				value: [
					['getComputedStyle(element)', 'Возвращает объект, содержащий значения всех свойств CSS элемента. <br>Получить свойство элемента: window.getComputedStyle(element).getPropertyValue(property)'],
					['getSelection()', 'Возвращает диапазон текста, выбранного пользователем, или текущую позицию курсора'],
					['focus()', 'Устанавливает фокус на текущее окно'],
					['blur()', 'Позволяет переключить фокус с текущего окна'],
					['open()', 'Позволяет открыть новое окно'],
					['close()', 'Закрывает текущее окно или окно, в котором он был вызван'],
					['confirm()', 'Метод отображает модальное диалоговое окно с дополнительным сообщением и двумя кнопками OK и отмена'],
					['prompt()', 'Возвращает текст, введенный пользователем в окне диалога'],
					['print()', 'Открывает диалоговое окно "печать", предназначенное для печати текущего документа'],
					['stop()', 'Останавливает дальнейшую загрузку ресурсов в текущем контексте просмотра, что эквивалентно кнопке остановить в браузере'],
					['performance.now()', 'Возвращает текущую временную метку в миллисекундах с точностью до одной тысячной миллисекунды'],
				]
			},
			{
				title: 'Properties',
				value: [
					['location', 'Возвращает информацию о текущем расположении документа'],
					['navigator', 'Возвращает ссылку на объект Navigator, содержащий общую информацию о номере версии и о производителе браузера'],
					['opener', 'Возвращает ссылку на окно, которое было открыто с помощью метода open()'],
					['outerHeight', 'Возвращает высоту в пикселях всего окна браузера'],
					['outerWidth', 'Возвращает ширину в пикселях всего окна браузера'],
				]
			},
			{
				title: 'location',
				value: [
					['window.location.href', 'полный путь (127.0.0.1:5500/index.html)'],
					['window.location.pathname', 'относительный путь (/index.html)'],
					['window.location.reload()', 'Обновление текущей страницы'],
					['window.location.assign()', 'метод вызывает переход на страницу, переданную в аргументах.После перехода на страницу пользователь может вернуться на страницу, с которой произошёл переход, с помощью браузерной кнопки назад'],
					['window.location.replace() ', 'аналогичен методу assign(), но адрес страницы с которой был вызван этот метод не будет сохранён в истории браузера.При попытке вернуться назад пользователь будет отправлен на страницу предшествующую той, с которой произошёл переход'],
				]
			},
			{
				title: 'localStorage/sessionStorage',
				value: [
					['setItem(key, value)', 'сохранить пару ключ/значение'],
					['getItem(key)', 'получить данные по ключу key'],
					['removeItem(key)', 'удалить данные с ключом key'],
					['clear()', 'удалить всё'],
					['key(index)', 'получить ключ на заданной позиции'],
					['length', 'количество элементов в хранилище'],
				]
			},
			{
				title: 'navigator',
				value: [
					['appCodeName', 'кодовое имя браузера'],
					['appName', 'имя браузера'],
					['appVersion ', 'версия браузера'],
					['cookieEnabled', 'позволяет определить включены ли cookie в браузере'],
					['geolocation', 'используется для определения местоположения пользователя'],
					['language ', 'язык браузера'],
					['onLine', 'имеет значение true или false в зависимости от того находиться ли браузер в сети или нет'],
					['platform', 'название платформы, для которой скомпилирован браузер'],
					['product', 'имя движка браузера'],
					['userAgent', 'возвращает заголовок user agent, который браузер посылает на сервер'],
				]
			},
		]
	},
	{
		title: 'OBJECT',
		content: [
			{
				title: 'Не изменяют исходный объект',
				value: [
					['Object.assign()', 'Метод позволяет произвести поверхностное копирование значений всех перечислимых собственных свойств и методов из одного или нескольких исходных объектов в целевой объект'],
					['Object.create( proto, props )', 'Позволяет создать новый объект с указанным объектом прототипом и при необходимости свойствами, описываемые дескрипторами. Дескрипторы свойств – это обычные объекты JavaScript, которые описывают атрибуты и значение свойства'],
					['Object.entries(obj)', 'Возвращает массив пар [ключ, значение]'],
					['Object.keys(obj)', 'Возвращает массив ключей'],
					['Object.values(obj)', 'Возвращает массив значений'],
					['Object.getOwnPropertyDescriptor(obj, prop)', 'Возвращает объект дескриптор для указанного собственного(неунаследованного) свойства заданного объекта'],
					['Object.getOwnPropertyDescriptors(obj)', 'Позволяет возвратить объект, содержащий дескрипторы всех собственных(неунаследованных) свойств заданного объекта'],
					['Object.getOwnPropertyNames(obj)', 'Метод воз­вра­ща­ет массив, состоящий из всех имен собственных(неунаследованных) свойств и методов объекта(включая неперечислимые свойства и методы)'],
					['Object.getOwnPropertySymbols(obj)', 'Метод возвращает массив, состоящий из всех символьных(Symbol) свойств переданного объекта(массив символов конкретного объекта)'],
					['Object.getPrototypeOf(obj)', 'Метод воз­вра­ща­ет про­то­тип переданного объ­ек­та'],
					['Object.is(value1, value2)', 'Метод возвращает логическое значение, которое определяет являются ли два переданных значения одинаковыми'],
					['Object.isExtensible(obj)', 'Метод возвращает логическое значение, которое определяет является ли объект расширяемым(доступно добавление новых собственных свойств), или нет'],
					['Object.isFrozen(obj)', 'Позволяет вернуть логическое значение, которое определяет является ли объект нерасширяемым с недоступными для настройки и изменения свойствами'],
					['Object.isSealed(obj)', 'Метод возвращает логическое значение, которое определяет является ли объект нерасширяемым и с недоступными для настройки свойствами, или нет'],
					['Object.setPrototypeOf(obj, proto)', 'Метод позволяет установить или изменить прототип указанному объекту'],
					['hasOwnProperty(prop)', 'Метод возвращает логическое значение, которое указывает на то содержит ли объект указанное cобственное(неунаследованное) свойство, или метод'],
					['propertyIsEnumerable()', 'Возвращает логическое значение, которое определяет является ли указанное свойство или метод целевого объекта перечислимым'],
					['isPrototypeOf()', 'Про­ве­ря­ет существует ли указанный объ­ект в цепочке прототипов другого объекта, возвращая при этом логическое значение'],
				]
			},
			{
				title: 'Изменяют исходный объект',
				value: [
					['Object.defineProperties( obj, props )', 'Позволяет определить новые или изменить существующие свойства объекта, описывая их дескрипторами'],
					['Object.defineProperty( obj, prop, descriptor )', 'Позволяет определить новое или изменить существующее свойство объекта, описывая его дескрипторами'],
					['Object.preventExtensions( obj )', 'позволяет сделать объект нерасширяемым (предотвращает добавление новых собственных (неунаследованных) свойств). При этом допускается как удаление, так и изменение свойств объекта, на котором был вызван метод'],
					['Object.seal( obj )', 'делает объект нерасширяемым (предотвращает добавление новых собственных (неунаследованных) свойств), а также устанавливает все его собственные свойства как ненастраиваемые (предотвращает их удаление и изменение дескриптора)'],
					['Object.freeze(obj)', 'Позволяет сделать объект:<br>нерасширяемым(предотвращает добавление новых собственных(неунаследованных) свойств)<br>устанавливает все его собственные свойства как ненастраиваемые(предотвращает их удаление и изменение дескриптора)<br>а также устанавливает все его собственные свойства недоступными для записи(изменение свойства объекта с помощью оператора присваивания не допускается'],

				]
			},
		]
	},
	{
		title: 'Array',
		content: [
			{
				title: 'Не изменяют исходный массив',
				value: [
					['concat()', 'Метод используется для объединения двух, или более массивов в один. Возвращает новый массив'],
					['entries()', 'Метод возвращает объект итератор, который содержит пары ключ/значение по каждому индексу в массиве. Возвращает Объект итератор'],
					['every( function(el, id, arr) )', 'Метод позволяет проверить (в порядке возрастания индекса), все ли элементы в массиве соответствуют условию заданному в передаваемой функции. Возвращает true/false'],
					['filter( function(el, id, arr) )', `Метод позволяет создать новый массив, элементы которого соответствуют условию заданному в переданной функции
Возвращает Новый массив`],
					['find( function(el, id, arr) )', `Метод возвращает значение первого элемента в массиве, который соответствует условию в переданной функции, или undefined, если ни один элемент не удовлетворяет условию в переданной функции.
Возвращает Первый найденный элемент или undefined`],
					['findIndex( function(el, id, arr) )', `Метод возвращает первый индекса элемента в массиве, который соответствует условию в переданной функции, или - 1, если ни один элемент не удовлетворяет условию в переданной функции.
Возвращает Индекс первого найденного элемента или - 1`],
					['forEach( function(el, id, arr) )', `Позволяет выполнить переданную функцию один раз для каждого элемента в массиве
Возвращает undefined`],
					['includes(el, id)', `Позволяет определить, содержит ли массив искомый элемент.В случае нахождения элемента метод возвращает логическое значение true, в обратном случае false
Возвращает true / false`],
					['indexOf(el, id)', `Метод возвращает индекс искомого элемента в массиве при первом совпадении, или - 1 если элемент не найден.
Возвращает Индекс элемента или - 1, если не найден`],
					['lastIndexOf(el, id)', `Метод возвращает последний индекс искомого элемента в массиве при первом совпадении, или - 1 если элемент не найден.
Возвращает Индекс элемента или - 1, если не найден`],
					['join()', `Позволяет преобразовать и объединить все элементы массива в одно строковое значение.
Возвращает Строку из элементов массива, с указанным разделителем в аргументе`],
					['keys()', `Возвращает новый итератор.После создания объект итератор может быть явно использован с помощью вызовов метода.next() для поочередного доступа к парам ключ - значение в объекте.Внутри возвращаемого объекта свойство value определяет индекс массива, a свойство done содержит логическое значение, которое определяет закончен ли проход по массиву. Возвращает Индексы массива`],
					['map( function(el, id, arr) )', `Позволяет вызвать переданную функцию один раз для каждого элемента массива, формируя новый массив из результатов вызова этой функции.
Возвращает Новый массив`],
					['reduce( function(el, id, arr), initialValue )', `Позволяет вызвать функцию обратного вызова один раз для каждого элемента массива в порядке возрастания индекса(слева - направо).Возвращаемое значение функции предоставляется как аргумент при следующем вызове функции, в результате чего возвращаемое значение последнего вызова становится возвращаемым значением метода(значение вычисляется из элементов массива).
Возвращает Результат последнего вызова`],
					['reduceRight()', `Позволяет вызвать функцию обратного вызова один раз для каждого элемента массива в порядке убывания индекса(справа - налево).
Возвращает Результат последнего вызова`],
					['slice()', `Позволяет возвратить новый массив, который содержит копии элементов, вырезанных из исходного массива.
Возвращает Новый массив`],
					['some()', `Позволяет проверить соответствует ли по крайней мере один элемент в массиве условию, заданному в передаваемой функции.
Возвращает true / false`],
					['toLocaleString()', `Позволяет преобразовать и объединить все элементы массива в одно строковое значение, при этом элементы массива в зависимости от их типа преобразуются в строки с использованием своих собственных методов 
Возвращает Строку из элементов массива`],
					['toString()', `Позволяет преобразовать и объединить все элементы массива в одно строковое значение.
Возвращает Строку из элементов массива`],
					['Array.of()', `Метод создает новый экземпляр массива, значения которого соответствует количеству переданных аргументов(независимо от их типа и числа).
Возвращает Новый массив`],
					['Array.from()', `Преобразует и возвращает новый массив из массивоподобного, или итерируемого объекта.
Возвращает Новый массив`],
					['Array.isArray()', `Метод определяет и возвращает логическое значение true в том случае, если переданное значение является массивом и false, если оно не является массивом.
Возвращает true / false`],
				]
			},
			{
				title: 'Изменяют исходный массив',
				value: [
					['copyWithin()', `Метод позволяет скопировать элементы массива (в зависимости от их индекса) и вставить их в тот же массив, заменяя определенные элементы массива (в зависимости от их индекса), длина массива при этом не изменяется.
Возвращает Изменённый массив`],
					['fill()', `Метод позволяет заполнить все элементы массива одним значением, при необходимости задавая значение начального индекса с которого начинается заполнение и конечное значение индекса, которым заканчивается заполнение.
Возвращает Изменённый массив`],
					['pop()', `Позволяет удалить последний элемент из массива и возвратить его значение.Этот метод изменяет длину массива.
Возвращает Последний элемент массива`],
					['push()', `Позволяет добавить один, или более элементов в конец массива.
Возвращает Длина массива`],
					['reverse()', `Позволяет обратить порядок следования элементов массива, таким образом, что первый элемент массива становится последним, а последний элемент первым.
Возвращает Элементы объекта Array в обратном порядке.`],
					['shift()', `Позволяет удалить первый элемент из массива и возвратить его значение.Этот метод изменяет длину массива.
Возвращает Первый элемент массива`],
					['sort()', `Позволяет отсортировать массив путём преобразования его элементов в строки и сравнения этих строк в порядке следования кодовых символов Unicode(сортирует массив по алфавиту).
Возвращает Отсортированный массив`],
					['splice()', `Позволяет изменить содержимое массива за счёт удаления существующих элементов, и / или добавления новых элементов в массив.
Возвращает Массив удалённых элементов`],
					['unshift()', `Позволяет добавить один, или более элементов в начало массива.После вызова(добавления элементов) возвращает значение соответствуюшее длине массива.
Возвращает Длина массива`],
				]
			},
		]
	},
	{
		title: 'REGEXP',
		content: [
			{
				title: 'Флаги',
				value: [
					['g', 'Позволяет найти все совпадения, а не останавливаться после первого совпадения (global match flag)'],
					['i', 'Позволяет выполнить сопоставление без учета регистра (ignore case flag)'],
					['m', 'Сопоставление производится по нескольким строкам. Обработка начальных и конечных символов (^ и $) производится по нескольким строкам, то есть сопоставление происходит с началом или концом каждой строки (разделители \\n или \\r), а не только с началом, или концом всей строки (multiline flag)'],
					['u', 'Шаблон будет расценен как последовательность кодовых точек Юникода(unicode flag)'],
					['y', 'Сопоставление происходит по индексу на который указывает свойство lastIndex этого регулярного выражения, при этом сопоставление не производиться по более позднему, или раннему индексу(sticky flag)'],
				]
			},
			{
				title: 'Наборы символов',
				value: [
					['[abc] / [a-c] / [0-9]', 'Позволяет найти любой символ в скобках'],
					['[^abc] / [^a-c] / [^0-9]', 'Позволяет найти любой символ за исключением того, или тех, которые находятся в скобках'],
				]
			},
			{
				title: 'Метасимволы',
				value: [
					['.', 'Позволяет найти один символ, кроме символа новой строки, или символа конца строки'],
					['\\d', 'Позволяет найти символ цифры в базовом латинском алфавите. Эквивалентин использованию набору символов [0-9]'],
					['\\D', 'Позволяет найти любой символ, который не является цифрой в базовом латинском алфавите. Эквивалентен набору символов [^0-9]'],
					['\\s', 'Позволяет найти одиночный пробельный символ. Под пробельным символом понимается пробел, табуляция, перевод страницы, перевод строки и другие пробельные символы Юникода'],
					['\\S', 'Позволяет найти одиночный символ, который не является пробельным.Под пробельным символом понимается пробел, табуляция, перевод страницы, перевод строки и другие пробельные символы Юникода'],
					['[\\b]', 'Позволяет найти символ backspace'],
					['\\0', 'Позволяет найти символ 0)'],
					['\\n', 'Позволяет найти символ новой строки'],
					['\\f', 'Позволяет найти символ перевода страницы'],
					['\\r', 'Позволяет найти символ возврата каретки'],
					['\\t', 'Позволяет найти символ горизонтальной табуляции'],
					['\\v', 'Позволяет найти символ вертикальной табуляции'],
					['\\w', 'Позволяет найти любой буквенно - цифровой символ базового латинского алфавита, включая подчеркивание.Эквивалентен набору символов[A-Za-z0-9_]'],
					['\\W', 'Позволяет найти любой символ, который не является символом из базового латинского алфавита.Эквивалентен набору символов[^a-Za-z0-9_]'],
					['\\cX', 'Позволяет найти контрольный символ в строке.Где X - буква от A до Z.Например, /\\cM/ обозначает символ Ctrl - M'],
					['\\xhh', 'Позволяет найти символ, используя шестнадцатеричное значение(hh - двухзначное шестнадцатеричное значение)'],
					['\\uhhhh', 'Позволяет найти символ, используя кодировку UTF - 16(hhhh - четырехзначное шестнадцатеричное значение)'],
					['\\u{ hhhh } или \\u{ hhhhh }', 'Позволяет найти символ со значением Юникода U + hhhh или U + hhhhh(шестнадцатеричное значение).Только когда задан флаг u'],
					['\\', "Указывает, что следующий символ является специальным и не должен интерпретироваться буквально.Для символов, которые обычно трактуются специальным образом, указывает, что следующий символ не является специальным и должен интерпретироваться буквально"],
				]
			},
			{
				title: 'Ограничения',
				value: [
					['^', 'Сопостовление производится с символом в начале строки (ввода). Если флаг m (multiline flag) указан, то сопоставление также произодится с позицией следующей за символом переноса строки'],
					['$', 'Сопостовление производится с символом в конце строки (ввода). Если флаг m (multiline flag) указан, то сопоставление также произодится с позицией следующей перед символом переноса строки'],
					['\\b', 'Позволяет выполнить поиск соответствия в начале или конце слова (например, позиция между буквой и пробелом)'],
					['\\B', 'Позволяет выполнить поиск соответствия не в начале или конце слова'],
				]
			},
			{
				title: 'Квантификаторы',
				value: [
					['n*', 'Сопостовление происходит с любой строкой, содержащей ноль или более вхождений символа n'],
					['n+', 'Сопостовление происходит с любой строкой, содержащей хотя бы один символ n'],
					['n?', 'Сопостовление происходит с любой строкой с предшествующим элементом n ноль или один раз'],
					['n{ x }', 'Соответствует любой строке, содержащей последовательность символов n определенное количество раз x.X должно быть целым положительным числом'],
					['n{ x,}', 'Соответствует любой строке, содержащей по крайней мере x вхождений предшествующего элемента n.X должно быть целым положительным числом'],
					['n{ x, y }', 'Соответствует любой строке, содержащей по крайней мере x, но не более, чем с y вхождениями предшествующего элемента n. x и y должны быть целыми положительными числами'],
					['x(?=y)', 'Позволяет сопоставить x, только если за x следует y'],
					['x(?!y)', 'Позволяет сопоставить x, только если за x не следует y'],
					['x|y', 'Сопоставление происходит с любой из указанных альтернатив'],
				]
			},
			{
				title: 'Группировка и обратные ссылки',
				value: [
					['(x)', 'Позволяет найти символ x и запомнить результат сопоставления ("захватывающие скобки"). Сопоставленная подстрока может быть вызвана из элементов результирующего массива [1]..., [n], или из свойств предопределенного объекта RegExp $1 ..., $9'],
					['(?: x)', 'Позволяет найти символ x, но не запоминать результат сопоставления("незахватывающие скобки").Сопоставленная подстрока не может быть вызвана из элементов результирующего массива[1]..., [n], или из свойств предопределенного объекта RegExp $1 ..., $9'],
					['\\n', 'Обратная ссылка на последнюю подстроку, совпадающую с n - ой по счёту в круглых скобках в регулярном выражении(нумерация скобок идет слева направо).n должно быть целым положительным числом'],
				]
			},
		]
	}
]

ARR.sort((a, b) => {
	let counter1 = 0
	let counter2 = 0

	a.content.forEach(el => {
		counter1 += el.value.length
	})
	b.content.forEach(el => {
		counter2 += el.value.length
	})

	return counter1 - counter2
})

export default ARR





























